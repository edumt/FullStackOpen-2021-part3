{"version":3,"sources":["services/persons.js","components/Filter/index.js","components/PersonForm/index.js","components/Persons/index.js","components/Notification/index.js","App.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","remove","delete","Filter","onChange","e","target","value","PersonForm","persons","setPersons","sendNotification","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","newPerson","name","number","preventDefault","some","person","window","confirm","find","updatedPerson","filter","createdPerson","type","Persons","filteredPersons","toLowerCase","includes","map","onClick","catch","_person","Notification","message","style","color","backgroundColor","padding","margin","border","borderRadius","fontSize","fontFamily","text","App","notificationMessage","setNotificationMessage","setTimeout","useEffect","setFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b728a053.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst remove = (id) => axios.delete(`${baseUrl}/${id}`);\r\n\r\nconst personService = { getAll, create, update, remove };\r\n\r\nexport default personService;\r\n","const Filter = ({ onChange }) => {\r\n  return (\r\n    <div>\r\n      filter shown with <input onChange={(e) => onChange(e.target.value)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useState } from \"react\";\r\nimport personService from \"../../services/persons\";\r\n\r\nconst PersonForm = ({ persons, setPersons, sendNotification }) => {\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    const newPerson = { name: newName, number: newNumber };\r\n    e.preventDefault();\r\n\r\n    if (persons.some((person) => person.name === newName)) {\r\n      if (\r\n        window.confirm(\r\n          `${newName} is already added to phonebook, replace the old number with a new one?`\r\n        )\r\n      ) {\r\n        const id = persons.find((person) => person.name === newName).id;\r\n        personService.update(id, newPerson).then((updatedPerson) => {\r\n          setPersons([\r\n            ...persons.filter((person) => person.id !== id),\r\n            updatedPerson,\r\n          ]);\r\n          sendNotification(`Updated ${updatedPerson.name}`, \"success\");\r\n        });\r\n      }\r\n    } else\r\n      personService.create(newPerson).then((createdPerson) => {\r\n        setPersons([...persons, createdPerson]);\r\n        sendNotification(`Added ${createdPerson.name}`, \"success\");\r\n      });\r\n    setNewName(\"\");\r\n    setNewNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        name:{\" \"}\r\n        <input onChange={(e) => setNewName(e.target.value)} value={newName} />\r\n      </div>\r\n      <div>\r\n        number:{\" \"}\r\n        <input\r\n          onChange={(e) => setNewNumber(e.target.value)}\r\n          value={newNumber}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import personService from \"../../services/persons\";\r\n\r\nconst Persons = ({ persons, filter = \"\", setPersons, sendNotification }) => {\r\n  const filteredPersons = persons.filter((person) =>\r\n    person.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n  return (\r\n    <div>\r\n      {filteredPersons.map((person) => (\r\n        <p key={person.name}>\r\n          {person.name} {person.number}{\" \"}\r\n          <button\r\n            onClick={() => {\r\n              if (window.confirm(`Delete ${person.name}?`)) {\r\n                personService\r\n                  .remove(person.id)\r\n                  .catch(() =>\r\n                    sendNotification(\r\n                      `Information of ${person.name} has already been removed from server`,\r\n                      \"error\"\r\n                    )\r\n                  );\r\n                setPersons(\r\n                  persons.filter((_person) => _person.id !== person.id)\r\n                );\r\n                sendNotification(`Removed ${person.name}`, \"success\");\r\n              }\r\n            }}\r\n          >\r\n            delete\r\n          </button>\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","const Notification = ({ message }) => {\r\n  const successStyle = {\r\n    color: \"green\",\r\n    backgroundColor: \"#bbb\",\r\n    padding: \"10px\",\r\n    margin: \"20px 0\",\r\n    border: \"2px solid green\",\r\n    borderRadius: \"5px\",\r\n    fontSize: \"24px\",\r\n    fontFamily: \"sans-serif\",\r\n  };\r\n  const errorStyle = {\r\n    color: \"red\",\r\n    backgroundColor: \"#bbb\",\r\n    padding: \"10px\",\r\n    margin: \"20px 0\",\r\n    border: \"2px solid red\",\r\n    borderRadius: \"5px\",\r\n    fontSize: \"24px\",\r\n    fontFamily: \"sans-serif\",\r\n  };\r\n\r\n  if (message === null) return null;\r\n\r\n  let style = {};\r\n  switch (message.type) {\r\n    case \"success\":\r\n      style = successStyle;\r\n      break;\r\n    case \"error\":\r\n      style = errorStyle;\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return <div style={style}>{message.text}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\n\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [notificationMessage, setNotificationMessage] = useState(null);\n\n  const sendNotification = (text, type) => {\n    setNotificationMessage({ text, type });\n    setTimeout(() => setNotificationMessage(null), 3000);\n  };\n\n  useEffect(() => {\n    personService.getAll().then((data) => setPersons(data));\n  }, []);\n\n  const [filter, setFilter] = useState(\"\");\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} />\n      <Filter onChange={setFilter} />\n      <h3>add a new</h3>\n      <PersonForm\n        persons={persons}\n        setPersons={setPersons}\n        sendNotification={sendNotification}\n      />\n      <h3>Numbers</h3>\n      <Persons\n        persons={persons}\n        filter={filter}\n        setPersons={setPersons}\n        sendNotification={sendNotification}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}